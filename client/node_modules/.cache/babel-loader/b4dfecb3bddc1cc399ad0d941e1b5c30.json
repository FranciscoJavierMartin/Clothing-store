{"ast":null,"code":"import { createStore, applyMiddleware, compose } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { persistStore } from 'redux-persist';\nimport createSagaMiddleware from 'redux-saga'; //import thunk from 'redux-thunk';\n\nimport logger from 'redux-logger';\nimport rootReducer from './reducers/rootReducer';\nimport rootSaga from './sagas/root-sagas';\nconst sagaMiddleware = createSagaMiddleware();\nconst middlewares = [sagaMiddleware];\nlet customCompose = compose;\n\nif (process.env.NODE_ENV === 'development') {\n  middlewares.push(logger);\n  customCompose = composeWithDevTools;\n}\n\nexport const store = createStore(rootReducer, customCompose(applyMiddleware(...middlewares)));\nsagaMiddleware.run(rootSaga);\nexport const persistor = persistStore(store);","map":{"version":3,"sources":["/Users/francisco/Developer/React/clothing-shop/client/src/store/store.ts"],"names":["createStore","applyMiddleware","compose","composeWithDevTools","persistStore","createSagaMiddleware","logger","rootReducer","rootSaga","sagaMiddleware","middlewares","customCompose","process","env","NODE_ENV","push","store","run","persistor"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,OAAOC,oBAAP,MAAiC,YAAjC,C,CACA;;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,OAAOC,QAAP,MAAqB,oBAArB;AAEA,MAAMC,cAAc,GAAGJ,oBAAoB,EAA3C;AACA,MAAMK,WAAkB,GAAG,CAACD,cAAD,CAA3B;AACA,IAAIE,aAAkB,GAAGT,OAAzB;;AAEA,IAAIU,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA2C;AACzCJ,EAAAA,WAAW,CAACK,IAAZ,CAAiBT,MAAjB;AACAK,EAAAA,aAAa,GAAGR,mBAAhB;AACD;;AAED,OAAO,MAAMa,KAAK,GAAGhB,WAAW,CAC9BO,WAD8B,EAE9BI,aAAa,CAACV,eAAe,CAAC,GAAGS,WAAJ,CAAhB,CAFiB,CAAzB;AAKPD,cAAc,CAACQ,GAAf,CAAmBT,QAAnB;AAEA,OAAO,MAAMU,SAAS,GAAGd,YAAY,CAACY,KAAD,CAA9B","sourcesContent":["import { createStore, applyMiddleware, compose } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { persistStore } from 'redux-persist';\nimport createSagaMiddleware from 'redux-saga';\n//import thunk from 'redux-thunk';\nimport logger from 'redux-logger';\nimport rootReducer from './reducers/rootReducer';\nimport rootSaga from './sagas/root-sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst middlewares: any[] = [sagaMiddleware];\nlet customCompose: any = compose;\n\nif (process.env.NODE_ENV === 'development'){\n  middlewares.push(logger);\n  customCompose = composeWithDevTools;\n}\n\nexport const store = createStore(\n  rootReducer,\n  customCompose(applyMiddleware(...middlewares))\n);\n\nsagaMiddleware.run(rootSaga);\n\nexport const persistor = persistStore(store);"]},"metadata":{},"sourceType":"module"}