{"ast":null,"code":"import _defineProperty from \"/Users/francisco/Developer/React/clothing-shop/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { usersCollection } from './../constansts/collectionNames';\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APP_ID,\n  measurementId: process.env.REACT_APP_MEASUREMENT_ID\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  let userRef;\n\n  if (userAuth) {\n    userRef = firestore.doc(\"\".concat(usersCollection, \"/\").concat(userAuth.uid));\n    const snapShot = await userRef.get();\n\n    if (!snapShot.exists) {\n      const displayName = userAuth.displayName,\n            email = userAuth.email;\n      const createdAt = new Date();\n\n      try {\n        await userRef.set(_objectSpread({\n          displayName,\n          email,\n          createdAt\n        }, additionalData));\n      } catch (error) {\n        console.error('Error on creating user', error.message);\n      }\n    }\n  } else {\n    userRef = undefined;\n  }\n\n  return userRef;\n};\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc(); //console.log(newDocRef);\n\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const _doc$data = doc.data(),\n          title = _doc$data.title,\n          items = _doc$data.items;\n\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nfirebase.initializeApp(firebaseConfig);\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase;","map":{"version":3,"sources":["/Users/francisco/Developer/React/clothing-shop/client/src/firebase/firebase.utils.ts"],"names":["usersCollection","firebase","firebaseConfig","apiKey","process","env","REACT_APP_API_KEY","authDomain","REACT_APP_AUTH_DOMAIN","databaseURL","REACT_APP_DATABASE_URL","projectId","REACT_APP_PROJECT_ID","storageBucket","REACT_APP_STORAGE_BUCKET","messagingSenderId","REACT_APP_MESSAGING_SENDER_ID","appId","REACT_APP_APP_ID","measurementId","REACT_APP_MEASUREMENT_ID","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","message","undefined","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","collections","transformedCollection","docs","map","data","title","items","routeName","encodeURI","toLowerCase","id","reduce","accumulator","initializeApp","getCurrentUser","Promise","resolve","reject","unsubscribe","auth","onAuthStateChanged","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import { usersCollection } from './../constansts/collectionNames';\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APP_ID,\n  measurementId: process.env.REACT_APP_MEASUREMENT_ID\n};\n\nexport const createUserProfileDocument = async (\n  userAuth: firebase.User,\n  additionalData?: any\n): Promise<firebase.firestore.DocumentReference | undefined> => {\n  let userRef: firebase.firestore.DocumentReference | undefined;\n\n  if (userAuth) {\n    userRef = firestore.doc(`${usersCollection}/${userAuth.uid}`);\n    const snapShot = await userRef.get();\n\n    if (!snapShot.exists) {\n      const { displayName, email } = userAuth;\n      const createdAt = new Date();\n      try {\n        await userRef.set({\n          displayName,\n          email,\n          createdAt,\n          ...additionalData\n        });\n      } catch (error) {\n        console.error('Error on creating user', error.message);\n      }\n    }\n  } else {\n    userRef = undefined;\n  }\n\n  return userRef;\n};\n\nexport const addCollectionAndDocuments = async (\n  collectionKey: string,\n  objectsToAdd: any\n) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach((obj: any) => {\n    const newDocRef = collectionRef.doc();\n    //console.log(newDocRef);\n    batch.set(newDocRef, obj);\n  });\n\n  return await batch.commit();\n};\n\nexport const convertCollectionsSnapshotToMap = (\n  collections: firebase.firestore.QuerySnapshot\n) => {\n  const transformedCollection = collections.docs.map(\n    (doc: firebase.firestore.QueryDocumentSnapshot) => {\n      const { title, items } = doc.data();\n\n      return {\n        routeName: encodeURI(title.toLowerCase()),\n        id: doc.id,\n        title,\n        items\n      };\n    }\n  );\n\n  return transformedCollection.reduce((accumulator: any, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport const getCurrentUser = (): Promise<any> => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({ prompt: 'select_account' });\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\n\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}